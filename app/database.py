from datetime import datetime
import os
from typing import Optional, Dict, Any
from supabase import create_client, Client
from dotenv import load_dotenv
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('gigsniper.database')

load_dotenv()

# Initialize Supabase client
supabase: Client = create_client(
    os.getenv("SUPABASE_URL", ""),
    os.getenv("SUPABASE_KEY", "")
)

# Table names
MONITORS_TABLE = "monitors"
SNAPSHOTS_TABLE = "snapshots"
JOBS_TABLE = "jobs"

# Database schema for reference (create these tables in Supabase)
"""
-- Create monitors table
create table public.monitors (
    id bigint generated by default as identity primary key,
    url text not null,
    interval integer not null,
    last_check timestamp with time zone default timezone('utc'::text, now()),
    is_active boolean default true,
    created_at timestamp with time zone default timezone('utc'::text, now())
);

-- Create snapshots table
create table public.snapshots (
    id bigint generated by default as identity primary key,
    monitor_id bigint references public.monitors(id),
    content_hash text not null,
    content text not null,
    created_at timestamp with time zone default timezone('utc'::text, now())
);

-- Create jobs table
create table public.jobs (
    id bigint generated by default as identity primary key,
    monitor_id bigint references public.monitors(id),
    title text not null,
    description text,
    url text,
    job_metadata jsonb default '{}'::jsonb,
    is_new boolean default true,
    detected_at timestamp with time zone default timezone('utc'::text, now())
);

-- Create indexes
create index idx_monitors_is_active on public.monitors(is_active);
create index idx_snapshots_monitor_id on public.snapshots(monitor_id);
create index idx_jobs_monitor_id on public.jobs(monitor_id);
create index idx_jobs_detected_at on public.jobs(detected_at);
"""

async def get_active_monitors():
    """Get all active monitors."""
    response = supabase.table(MONITORS_TABLE).select("*").eq("is_active", True).execute()
    return response.data

async def create_monitor(url: str, interval: int):
    """Create a new monitor."""
    response = supabase.table(MONITORS_TABLE).insert({
        "url": url,
        "interval": interval
    }).execute()
    return response.data[0]

async def create_snapshot(monitor_id: int, content: str, content_hash: str):
    """Create a new snapshot."""
    response = supabase.table(SNAPSHOTS_TABLE).insert({
        "monitor_id": monitor_id,
        "content": content,
        "content_hash": content_hash
    }).execute()
    return response.data[0]

async def get_latest_snapshot(monitor_id: int):
    """Get the latest snapshot for a monitor."""
    try:
        response = supabase.table(SNAPSHOTS_TABLE)\
            .select("*")\
            .eq("monitor_id", monitor_id)\
            .order("created_at", desc=True)\
            .limit(1)\
            .execute()
        
        logger.info(f"Latest snapshot query response: {response.data}")
        
        # Return None if no snapshot or if snapshot has empty content/hash
        if not response.data or not response.data[0].get('content_hash') or not response.data[0].get('content'):
            logger.info("No valid snapshot found (empty or missing content/hash)")
            return None
            
        return response.data[0]
    except Exception as e:
        logger.error(f"Error getting latest snapshot: {e}")
        return None

async def create_job(
    monitor_id: int,
    title: str,
    description: str,
    url: str,
    metadata: Optional[Dict[str, Any]] = None
):
    """Create a new job."""
    response = supabase.table(JOBS_TABLE).insert({
        "monitor_id": monitor_id,
        "title": title,
        "description": description,
        "url": url,
        "job_metadata": metadata or {}
    }).execute()
    return response.data[0]

async def get_all_jobs(limit: int = 100):
    """Get all jobs, ordered by detection date."""
    response = supabase.table(JOBS_TABLE)\
        .select("*")\
        .order("detected_at", desc=True)\
        .limit(limit)\
        .execute()
    return response.data

async def update_monitor_last_check(monitor_id: int):
    """Update the last check time for a monitor."""
    response = supabase.table(MONITORS_TABLE)\
        .update({"last_check": datetime.utcnow().isoformat()})\
        .eq("id", monitor_id)\
        .execute()
    return response.data[0] 